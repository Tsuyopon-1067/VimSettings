include c.snip

# #include <...>
snippet inc
options     head
alias   #inc, #include
    #include <${1:iostream}>${0}
# #include "..."
snippet inc2
options     head
alias   #inc2, #include2
    #include "${1}"${0}

snippet     template
abbr        template <T>
    template<typename ${1:T}> ${0}

snippet     class
options     head
abbr        class {}
    class ${1:#:name} {
        ${2}
    public:
        $1(${3});
    };
    $1::$1($3) {
        ${0:TARGET}
    }

snippet     class-without-constructor
options     head
abbr        class {}
    class ${1:#:name} {
        ${2}
    };

snippet     try
options     head
abbr        try catch
    try {
        ${1:#:TARGET}
    } catch (${2:...}) {
        ${3}
    }

# lambda expression ( C++11 feature )
snippet     lambda
abbr        [](){}
    [${1}](${2})${3}{ ${4:TARGET} }${0:;}

# scoped enumeration ( C++11 feature )
snippet     enum_scoped
options     head
abbr        enum struct {};
    enum struct ${1:#:name} { ${2:#:TARGET} };

# static assert ( C++11 feature )
snippet     static_assert
abbr        static_assert(,"")
    static_assert( ${1}, "${2}" );${0}

snippet     namespace
abbr        namespace {}
options     head
    namespace ${1:#:name} {
        ${0:TARGET}
    } // namespace $1

snippet     static_cast
abbr        static_cast<>()
    static_cast<${1}>(${2})${0}

snippet     reinterpret_cast
abbr        reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet     const_cast
abbr        const_cast<>()
    const_cast<${1}>(${2})${0}

snippet     dynamic_cast
abbr        dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet     helloworld
abbr        #include<iostream> int main...
    #include <iostream>

    int main(int argc, char* argv[])
    {
        std::cout << "hello, world!" << std::endl;
        return 0;
    }

snippet     p
options     head
  std::cout << ${0:TARGET} << std::endl;

snippet     atutil
options     head
    #define rep(i, n) for (int i = 0; i < (int)(n); ++i)
    #define reps(i, s, n) for (int i = (s); i < (int)(n); ++i)
    #define rrep(i, n) for (int i = (int)(n-1); i >= 0; --i)
    #define MOD 1000000007
    #define INF 2000000000
    #define INFL 1000000000000000000
    template <typename T> bool chmin(T &a, const T& b) { if (a > b) { a = b; return true; } return false; }
    template <typename T> bool chmax(T &a, const T& b) { if (a < b) { a = b; return true; } return false; }
    template <typename T> int count_digit(T n) { int res = 0; while (n > 0) { ++res; n /= 10; } return res; }
    typedef long long ll;
    ${0:}

snippet     vecdebug
options     head
    #define _GLIBCXX_DEBUG
    ${0:}
    
snippet     atmain
options     head
    #include <bits/stdc++.h>
    using namespace std;

    int main() {${0:}
        return 0;
    }
snippet     rtn
options word
    return 0;
snippet     tostr
options word
    to_string(${1:n})${0:}


snippet     atmainvv
options     head
    #include <bits/stdc++.h>
    using namespace std;

    int main() {
        int ${1:x}, ${2:y};
        cin >> $1 >> $2;${0:}
        return 0;
    }

snippet     atmainv
options     head
    #include <bits/stdc++.h>
    using namespace std;

    int main() {
        int ${1:n};
        cin >> $1;${0:}
        return 0;
    }

snippet     atmainvvv
options     head
    #include <bits/stdc++.h>
    using namespace std;

    int main() {
        int ${1:a}, ${2:b}, ${3:c};
        cin >> $1 >> $2 >> $3;${0:}
        return 0;
    }

snippet     atmainvvvv
options     head
    #include <bits/stdc++.h>
    using namespace std;

    int main() {
        int ${1:a}, ${2:b}, ${3:c}, ${4:d};
        cin >> $1 >> $2 >> $3 >> $4;${0:}
        return 0;
    }

snippet     atmains
options     head
    #include <bits/stdc++.h>
    using namespace std;

    int main() {
        string ${1:s};
        cin >> $1;${0:}
        return 0;
    }
snippet     scani
options word
    int ${1:n};
    cin >> $1;${0:}
snippet     scanii
options word
    int ${1:x}, ${2:y};
    cin >> $1 >> $2;${0:}
snippet     scaniii
options word
    int ${1:a}, ${2:b}, ${3:c};
    cin >> $1 >> $2 >> $3;${0:}
snippet     scaniiii
options word
    int ${1:a}, ${2:b}, ${3:c}, ${4:d};
    cin >> $1 >> $2 >> $3 >> $4;${0:}
snippet     scaniiiii
options word
    int ${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e};
    cin >> $1 >> $2 >> $3 >> $4 >> $5;${0:}
snippet     scaniiiiii
options word
    int ${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e}, ${6:e};
    cin >> $1 >> $2 >> $3 >> $4 >> $5 >> $6;${0:}
snippet     scanl
options word
    long long ${1:n};
    cin >> $1;${0:}
snippet     scanll
options word
    long long ${1:x}, ${2:y};
    cin >> $1 >> $2;${0:}
snippet     scanlll
options word
    long long ${1:a}, ${2:b}, ${3:c};
    cin >> $1 >> $2 >> $3;${0:}
snippet     scanllll
options word
    long long ${1:a}, ${2:b}, ${3:c}, ${4:d};
    cin >> $1 >> $2 >> $3 >> $4;${0:}
snippet     scand
options word
    double ${1:n};
    cin >> $1;${0:}
snippet     scandd
options word
    double ${1:x}, ${2:y};
    cin >> $1 >> $2;${0:}
snippet     scanddd
options word
    double ${1:a}, ${2:b}, ${3:c};
    cin >> $1 >> $2 >> $3;${0:}
snippet     scandddd
options word
    double ${1:a}, ${2:b}, ${3:c}, ${4:d};
    cin >> $1 >> $2 >> $3 >> $4;${0:}
snippet     scans
options word
    string ${1:s};
    cin >> $1;${0:}
snippet     scanss
options word
    string ${1:s}, ${2:t};
    cin >> $1 >> $2;${0:}

snippet     vector
options word
    vector<${1:int}> ${2:a}(${3:n});${0:}
snippet     vvector
options word
    vector<${1}> ${2:a}(${3:n});
    vector<$1> ${4:b}($3);${0:}

snippet     wvector
options word
    vector<vector<${1:int}>> ${2:NAME}(${3:n}, vector<$1>(${4:n}));${0:}
snippet     graphv
options word
    vector<vector<int>> ${1:NAME}(${2:n});${0:}
snippet     erase
options word
    ${1:v}.erase($1.begin()+${2:i});${0:}

snippet     list
options word
    list<${1:int}> ${2:a};${0:}

snippet     sort
    sort(${1:a}.begin(), $1.end());${0:}

snippet     reverse
    reverse(${1:a}.begin(), $1.end());${0:}

snippet     unique
    unique(${1:a}.begin(), $1.end());${0:}

snippet     for
    for (int ${1:i} = 0; $1 < ${2:n}; ++$1) {
        ${0:TARGET}
    }

snippet     fore
    for (auto ${1:x} : ${2:a}) {
        ${0:}
    }
snippet     rep
    rep (${1:i}, ${2:n}) {
        ${0:}
    }
snippet     reps
    reps (${1:i}, ${2:1}, ${3:n}) {
        ${0:}
    }
snippet     rrep
    rrep (${1:i}, ${2:n}){
        ${0:}
    }

snippet     min3
options     head
    int min3(int a, int b, int c) {
        a = a < b ? a : b;
        a = a < c ? a : c;
        return a;
    }

snippet     atmod
options     head
    #define MOD 1000000007

snippet     pow2
options     head
    int pow2(int n) {
        int res = 1;
        while(n--) res *= 2;
        return res;
    }


snippet     pp
options     head
    int pp(int n) {
        return n*n;
    }

snippet     digitSum
options     head
    int digitSum(int n) {
        int res = 0;
        while(n > 0){
            res += n % 10;
            n /= 10;
        }
        return res;
    }

snippet     cout
    cout << ${1:TARGET} << endl;${0:}
snippet     fcout
    cout << setprecision(${1:n}) << ${2:TARGET} << endl;${0:}

snippet     aryin
    for (auto &${1:x} : ${2:a}) cin >> $1;${0:}

snippet     aryout
    for(auto ${1:x} : ${2:a}) cout << $1 << " ";
    cout << endl;${0:}

snippet     arysum
    int ${1:sum} = 0;
    for(int i = 0; i < n; ++i) $1 += ${2:a}[i];${0:}

snippet     set
    set<${1:int}>${2:st};${0:}
snippet     find
options word
    ${1:st}.find(${2:x}) != $1.end()${0:}

snippet     map
    map<${1:int}, ${2:int}>${3:mp};${0:}
snippet     pair
    pair<${1:int}, ${2:int}>${3:pr};${0:}
snippet     ff
options word
    first
snippet     ss
options word
    second

snippet     setshow
    for(int x: ${1:Name}) cout << x;

snippet     boolisinsection
alias       binsect
    bool isInSection(int a, int b, int x){
        if(a <= x && x <= b) return true;
        else return false;
    }

snippet     isinsection
alias insect
    isInSection(${1:a}, ${2:b}, ${3:x})

snippet     pbk
alias pbk
options word
    push_back(${1:n});${0}

snippet     ansy
alias ansy
options word
    ans = "${1:Yes}"; ${0}

snippet     ansn
alias ansn
options word
    ans = "${1:No}"; ${0}


snippet     prime_list
alias primelist
    vector<int> prime_list(int n) {
        vector<bool> lst(n+1, true);
        lst[0] = false;
        lst[1] = false;
        for (int i = 2; i <= n; ++i) {
            if (lst[i] == false) continue;
            int jn = n / i;
            for (int j = 2; j <= jn; j++) lst[i*j] = false;
        }
        vector<int> res;
        for (int i = 2; i <= n; ++i) {
            if (lst[i]) res.push_back(i);
        }
        return res;
    }
    ${0:}

snippet     prime_vec
alias prime_vec
    vector<int> prime_vec(int n) {
        vector<bool> lst(n+1, true);
        lst[0] = false;
        lst[1] = false;
        for (int i = 2; i <= n; ++i) {
            if (lst[i] == false) continue;
            int jn = n / i;
            for (int j = 2; j <= jn; j++) lst[i*j] = false;
        }
        vector<int> res;
        for (int i = 2; i <= n; ++i) {
            if (lst[i]) res.push_back(i);
        }
        return res;
    }

snippet     getprime
alias   getprime
    vector<bool> ${1:} = prime_list(${2:});${0:}

snippet     arymax
    int ${1:max} = 0;
    for (int ${2:i} = 0; $2 < ${3:n}; $2++) $1 = max($1, ${4:a}[$2]);
snippet     que
    queue<${1:int}> ${2:que};${0:}
snippet     pque
    priority_queue<${1:int}, vector<$1>, greater<$1>> ${2:pq};${0:}

snippet     bfs
    vector<int> ${1:dist}(${2:n}, -1);
    $1[0] = 0;
    queue<int> ${3:gq};
    $3.push(0);

    while (!$3.empty()) {
        int v = $3.front();
        $3.pop();
        for (auto next_v : g[v]) {
            if ($1[next_v] == -1) continue;
            $3.push(next_v);
            $3[next_v] = $3[v] + 1;
        }
    }${0:}

snippet     lbound
    auto itr = lower_bound(${1:a}.begin(), $1.end(), ${2:x});
    int ${3:idx} = distance($1.begin(), itr);${0:}

snippet     sdp
    vector<${1:int}> dp(${2:n}, 0);${0:}
snippet     wdp
    vector<vector<${1:int}>> dp(${2:n}, vector<$1>(${3:n}, 0));${0:}
