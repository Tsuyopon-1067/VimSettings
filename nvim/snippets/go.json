{
    "atmain": {
        "prefix": "atmain",
        "body": [
            "package main",
            "",
            "import (",
            "\t\"fmt\"",
            ")",
            "",
            "func main() {",
            "\t${0:}",
            "}"
        ]
    },
    "atutil" : {
        "prefix" : "atutil",
        "body" : [
            "package main",
            "",
            "import (",
            "\t\"fmt\"",
            ")",
            "",
            "const INFL = 9000000000000000000",
            "func chmin(a *int, b int) (res bool) { if res = *a > b; res { *a = b }; return }",
            "func chmax(a *int, b int) (res bool) { if res = *a < b; res { *a = b }; return }",
            "func abs(x int) int { if x >= 0 { return x } else { return -x } }",
            "func lower_bound(a []int, x int) int { n := len(a); l, r := 0, n-1; if a[n-1] < x { return n }; for l <= r { m := l + (r-l)/2; if a[m] < x { l = m+1 } else { r = m-1 } }; return l }",
            "func upper_bound(a []int, x int) int { n := len(a); l, r := 0, n-1; if a[n-1] < x { return n }; for l <= r { m := l + (r-l)/2; if a[m] <= x { l = m+1 } else { r = m-1 } }; return l }",
            "func gcd(a, b int) int { if b == 0 { return a }; return gcd(b, a%b) }",
            "func lcm(a, b int) int { return a / gcd(a, b) * b }",
            "",
            "func main() {",
            "\t${0:}",
            "}"
        ]
    },
    "atutilr" : {
        "prefix" : "atutilr",
        "body" : [
            "package main",
            "",
            "import (",
            "\t\"fmt\"",
            "\t\"bufio\"",
            "\t\"os\"",
            "\t\"strings\"",
            "\t\"strconv\"",
            ")",
            "",
            "const INFL = 9000000000000000000",
            "const BUFSIZE = 10000000",
            "var rdr *bufio.Reader",
            "func chmin(a *int, b int) (res bool) { if res = *a > b; res { *a = b }; return }",
            "func chmax(a *int, b int) (res bool) { if res = *a < b; res { *a = b }; return }",
            "func abs(x int) int { if x >= 0 { return x } else { return -x } }",
            "func lower_bound(a []int, x int) int { n := len(a); l, r := 0, n-1; if a[n-1] < x { return n }; for l <= r { m := l + (r-l)/2; if a[m] < x { l = m+1 } else { r = m-1 } }; return l }",
            "func upper_bound(a []int, x int) int { n := len(a); l, r := 0, n-1; if a[n-1] < x { return n }; for l <= r { m := l + (r-l)/2; if a[m] <= x { l = m+1 } else { r = m-1 } }; return l }",
            "func gcd(a, b int) int { if b == 0 { return a }; return gcd(b, a%b) }",
            "func lcm(a, b int) int { return a / gcd(a, b) * b }",
            "func readline() string { buf := make([]byte, 0, 16); for { l, p, e := rdr.ReadLine(); if e != nil { fmt.Println(e.Error()); panic(e) }; buf = append(buf, l...); if !p { break } }; return string(buf) }",
            "func readIntSlice() []int { slice := make([]int, 0); lines := strings.Split(readline(), \" \"); for _, v := range lines { slice = append(slice, s2i(v)) }; return slice; }",
            "func readStringSlice() []string { return strings.Split(readline(), \" \") }",
            "func s2i(s string) int { v, ok := strconv.Atoi(s); if ok != nil { panic(\"Faild : \" + s + \" can't convert to int\") }; return v }",
            "func readint() int { return s2i(readline()) }",
            "func readint2() (int, int) { lines := strings.Split(readline(), \" \"); return s2i(lines[0]), s2i(lines[1]) }",
            "func readint3() (int, int, int) { lines := strings.Split(readline(), \" \"); return s2i(lines[0]), s2i(lines[1]), s2i(lines[2]) }",
            "func readint4() (int, int, int, int) { lines := strings.Split(readline(), \" \"); return s2i(lines[0]), s2i(lines[1]), s2i(lines[2]), s2i(lines[3]) }",
            "func readint5() (int, int, int, int, int) { lines := strings.Split(readline(), \" \"); return s2i(lines[0]), s2i(lines[1]), s2i(lines[2]), s2i(lines[3]), s2i(lines[4]) }",
            "func readint6() (int, int, int, int, int, int) { lines := strings.Split(readline(), \" \"); return s2i(lines[0]), s2i(lines[1]), s2i(lines[2]), s2i(lines[3]), s2i(lines[4]), s2i(lines[5]) }",
            "",
            "func main() {",
            "\trdr = bufio.NewReaderSize(os.Stdin, BUFSIZE)",
            "\t${0:}",
            "}"
        ]
    },
    "int" : {
        "prefix" : "int",
        "body" : [
            "var ${1:a} int${0:}"
        ]
    },
    "string" : {
        "prefix" : "string",
        "body" : [
            "var ${1:s} string${0:}"
        ]
    },
    "scanf" : {
        "prefix" : "scanf",
        "body" : [
            "fmt.Scanf(\"${1:}\", &$2)${0:}"
        ]
    },
    "scani" : {
        "prefix" : "scani",
        "body" : [
            "var ${1:n} int",
            "fmt.Scanf(\"%d\", &$1)${0:}"
        ]
    },
    "scanii" : {
        "prefix" : "scanii",
        "body" : [
            "var ${1:x}, ${2:y} int",
            "fmt.Scanf(\"%d %d\", &$1, &$2)${0:}"
        ]
    },
    "scanhw" : {
        "prefix" : "scanhw",
        "body" : [
            "var h, w int",
            "fmt.Scanf(\"%d %d\", &h, &w)${0:}"
        ]
    },
    "scaniii" : {
        "prefix" : "scaniii",
        "body" : [
            "var ${1:a}, ${2:b}, ${3:c} int",
            "fmt.Scanf(\"%d %d %d\", &$1, &$2, &$3)${0:}"
        ]
    },
    "scaniiii" : {
        "prefix" : "scaniiii",
        "body" : [
            "var ${1:a}, ${2:b}, ${3:c}, ${4:d} int",
            "fmt.Scanf(\"%d %d %d %d\", &$1, &$2, &$3, &$4)${0:}"
        ]
    },
    "scaniiiii" : {
        "prefix" : "scaniiiii",
        "body" : [
            "var ${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e} int",
            "fmt.Scanf(\"%d %d %d %d %d\", &$1, &$2, &$3, &$4, &$5)${0:}"
        ]
    },
    "scaniiiiii" : {
        "prefix" : "scaniiiiii",
        "body" : [
            "var ${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e}, ${6:f} int",
            "fmt.Scanf(\"%d %d %d %d %d %d %d\", &$1, &$2, &$3, &$4, &$5, &$6)${0:}"
        ]
    },
    "scand" : {
        "prefix" : "scand",
        "body" : [
            "var ${1:x} float",
            "fmt.Scanf(\"%d\", &$1)${0:}"
        ]
    },
    "scandd" : {
        "prefix" : "scandd",
        "body" : [
            "var ${1:x}, ${2:y} float",
            "fmt.Scanf(\"%d %d\", &$1, &$2)${0:}"
        ]
    },
    "scans" : {
        "prefix" : "scans",
        "body" : [
            "var ${1:s} string",
            "fmt.Scanf(\"%s\", &$1)${0:}"
        ]
    },
    "scanss" : {
        "prefix" : "scanss",
        "body" : [
            "var ${1:s}, ${2:t} string",
            "fmt.Scanf(\"%s %s\", &$1, &$2)${0:}"
        ]
    },
    "print" : {
        "prefix" : "print",
        "body" : [
            "fmt.Print(${1:})${0:}"
        ]
    },
    "printf" : {
        "prefix" : "printf",
        "body" : [
            "fmt.Printf(\"${1:}\\n\"${2:})${0:}"
        ]
    },
    "println" : {
        "prefix" : "println",
        "body" : [
            "fmt.Println(${1:})${0:}"
        ]
    },
    "slice" : {
        "prefix" : "slice",
        "body" : [
            "${1:a} := make([]${2:int}, ${3:n})${0}"
        ]
    },
    "wslice" : {
        "prefix" : "wslice",
        "body" : [
            "${1:a} := make([][]${2:int}, ${3:h})",
            "for ${4:i} := int(0); $4 < $3; $4++ {",
            "\t$1[$4] = make([]$2, ${5:w})",
            "}${0:}"
        ]
    },
    "aryin" : {
        "prefix" : "aryin",
        "body" : [
            "for ${1:i}, _ := range ${2:a} {",
            "    fmt.Scanf(\"%d\", &$2[$1])",
            "}"
        ]
    },
    "waryin" : {
        "prefix" : "waryin",
        "body" : [
            "for ${1:i} := int(0); $1 < ${3:h}; $1++ {",
            "\tfor ${2:j} := int(0); $2 < ${4:w}; $2++ {",
            "\tfmt.Scanf(\"%d\", &${5:a}[$1][$2])",
            "\t}",
            "}"
        ]
    },
    "aryout" : {
        "prefix" : "aryout",
        "body" : [
            "for _, ${1:x} := range ${2:a} {",
            "\tfmt.Printf(\"%d \", $1)",
            "}",
            "fmt.Printf(\"\\n\")"
        ]
    },
    "sort" : {
        "prefix" : "sort",
        "body" : [
            "sort.Slice(${1:a}, func(i, j ${2:int}) bool {",
            "\treturn $1[i] < $1[j]",
            "})"
        ]
    },
    "map" : {
        "prefix" : "map",
        "body" : [
            "${1:mp} := make(map[${2:int}]${3:int})${0}"
        ]
    },
    "set" : {
        "prefix" : "set",
        "body" : [
            "${1:st} := make(map[${2:int}]bool)${0}"
        ]
    },
    "for" : {
        "prefix" : "for",
        "body" : [
            "for ${1:i} := int(0); $1 < ${2:n}; $1++ {",
            "\t${0:}",
            "}"
        ]
    },
    "fore" : {
        "prefix" : "fore",
        "body" : [
            "for ${1:i}, ${2:v} := range ${3:a} {",
            "\t${0:}",
            "}"
        ]
    },
    "while" : {
        "prefix" : "while",
        "body" : [
            "for ${1:condition} {",
            "\t${0:}",
            "}"
        ]
    },
    "if" : {
        "prefix" : "if",
        "body" : [
            "if ${1:jouken} {",
            "\t${0:}",
            "}"
        ]
    },
    "switch" : {
        "prefix" : "switch",
        "body" : [
            "switch ${1:n} {",
            "\tcase ${2:1}:",
            "\t\t${0:}",
            "}"
        ]
    },
    "ansy" : {
        "prefix" : "ansy",
        "body" : [
            "ans = \"Yes\"${0:}"
        ]
    },
    "ansn" : {
        "prefix" : "ansn",
        "body" : [
            "ans = \"No\"${0:}"
        ]
    },
    "swap" : {
        "prefix" : "swap",
        "body" : [
            "${1:a}, ${2:b} = $2, $1${0:}"
        ]
    }
}

